import logging
from fastapi import APIRouter, BackgroundTasks, Depends, File, Form, HTTPException, Body, Path, Query, UploadFile, logger
from sqlalchemy.orm import Session
from app.core.config import settings
from typing import Any, List, Optional
from app.api.deps import get_db, get_current_user
from app.models.user import User
from app.services.auth import (
    send_email_verification, 
    send_phone_verification, 
    verify_email_token_service, 
    verify_phone_code_service
)
from app.schemas.user import UserBase, UserProfileUpdate, UserProfileUpdate, UserResponse
from app.services.user import cleanup_old_avatar, cleanup_old_cover_photo, is_valid_file, save_avatar, save_cover_photo
from app.utils.serialization import serialize_user

ALLOWED_EXTENSIONS = {"jpg", "jpeg", "png", "gif", "webp"}
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/me", response_model=UserResponse)
async def get_current_user_route(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏"""
    print(f"DEBUG: User ID: {current_user.id}, is_superuser: {current_user.is_superuser}")
    if hasattr(current_user, "roles") and current_user.roles:
        print(f"DEBUG: User roles from DB: {[r.role for r in current_user.roles]}")
    else:
        print("DEBUG: User has no roles in DB")
    
    serialized_user = serialize_user(current_user)
    print(f"DEBUG: Serialized roles: {serialized_user['roles']}")
    
    return serialized_user

@router.patch("/me", response_model=UserProfileUpdate)
async def update_user_profile(
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
    user_data: Optional[str] = Form(None),
    avatar: Optional[UploadFile] = File(None),
    cover_photo: Optional[UploadFile] = File(None),
) -> Any:
    """
    –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if not user_data and not avatar and not cover_photo:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    update_data = {}
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ user_data
    if user_data:
        try:
            from json import loads
            user_update = UserProfileUpdate.model_validate(loads(user_data))
            update_data = user_update.model_dump(exclude_unset=True)
        except Exception as e:
            logger.error(f"Error parsing user data: {e}")
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
    if avatar:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        await avatar.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        content = await avatar.read(MAX_FILE_SIZE + 1)
        if len(content) > MAX_FILE_SIZE:
            raise HTTPException(status_code=400, detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. {MAX_FILE_SIZE // 1024 // 1024} MB)")
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await avatar.seek(0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not is_valid_file(avatar.filename, avatar.content_type):
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
            )
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä
        avatar_path = await save_avatar(current_user.id, avatar)
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É:", avatar_path)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data["avatar_url"] = avatar_path
        print("üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", update_data)
        # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        if current_user.avatar_url:
            logger.info(f"–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: {current_user.avatar_url}")
            background_tasks.add_task(cleanup_old_avatar, current_user.avatar_url)
        else:
            logger.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–æ–∂–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if cover_photo:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        await cover_photo.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        content = await cover_photo.read(MAX_FILE_SIZE + 1)
        if len(content) > MAX_FILE_SIZE:
            raise HTTPException(status_code=400, detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. {MAX_FILE_SIZE // 1024 // 1024} MB)")
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await cover_photo.seek(0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not is_valid_file(cover_photo.filename, cover_photo.content_type):
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
            )
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É
        cover_path = await save_cover_photo(current_user.id, cover_photo)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data["cover_photo"] = cover_path
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –æ–±–ª–æ–∂–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if hasattr(current_user, "cover_photo") and current_user.cover_photo:
            logger.info(f"–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–π –æ–±–ª–æ–∂–∫–∏: {current_user.cover_photo}")
            background_tasks.add_task(cleanup_old_cover_photo, current_user.cover_photo)
        else:
            logger.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ç–∞—Ä–æ–π –æ–±–ª–æ–∂–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if update_data:
        for field, value in update_data.items():
            setattr(current_user, field, value)
            
        db.commit()
        db.refresh(current_user)
        logger.info("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return {
            "status": "success",
            "message": "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "data": current_user
        }
    else:
        raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
@router.get("/", response_model=List[UserResponse])
def get_users_by_ids(
    ids: List[int] = Query(..., description="–°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    db: Session = Depends(get_db)
):
    users = db.query(User).filter(User.id.in_(ids)).all()
    if not users:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–µ–º roles
    return [serialize_user(user) for user in users]
    
@router.post("/me/send-email-verification", response_model=Any)
def send_email_verification_request(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Any:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        send_email_verification(db, current_user.id)
        return {"message": "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/me/send-phone-verification", response_model=Any)
def send_phone_verification_request(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
) -> Any:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        send_phone_verification(db, current_user.id)
        return {"message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/me/verify-phone", response_model=Any)
def verify_phone(
    *,
    db: Session = Depends(get_db),
    code: str = Body(..., embed=True),
    current_user: User = Depends(get_current_user)
) -> Any:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–¥–∞.
    """
    try:
        verify_phone_code_service(db, current_user.id, code)
        return {"message": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ
@router.get("/verify-email", response_model=Any)
def verify_email(
    token: str,
    db: Session = Depends(get_db)
) -> Any:
    """
    –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ —Å—Å—ã–ª–∫–∏.
    """
    try:
        user = verify_email_token_service(db, token)
        return {"message": "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))